heat_template_version: 2013-05-23

description: >
  HOT template to develop AD  HA  and network, creates a power shell in the second instance to run and add such as second AD controller.

parameters:
#Start instance parameters
  compute:
    description: Compute
    type: string
    default: comp100
    constraints:
      - allowed_values: [comp100, comp101, comp102]
        description: Must be a valid Compute.

  instance_type:
    description: Instance type
    type: string
    default: Black-Net
    constraints:
      - allowed_values: [Green, Green-Net, Blue, Blue-Net]
        description: Must be a valid Instance type.

  image_id:
    default: Windows2012_STD_64
    description: Windows image version of choice
    type: string
    constraints:
      - allowed_values: [ Windows2012_STD_64, Windows2008_EntR2_32bit]
        description: Must be a valid Windows image

  domain_name:
    default: POCAD.local
    description: The domain name
    type: string
    constraints:
      - length: { min: 3, max: 256 }
      - allowed_pattern: "[A-Za-z0-9]+(?=[\\.\\-][a-zA-Z0-9])*\\.[a-zA-z09]+"
        description : must be a valid DNS name.

  hostname_AD1:
    default: POCAD1
    description: The Netbios domain name
    type: string
    constraints:
      - length: { min: 1, max: 15 }
      - allowed_pattern: "[a-zA-Z][a-zA-Z0-9]*"
        description: must begin with a letter and contain only alphanumeric characters.
  hostname_AD2:
    default: POCAD2
    description: The Netbios domain name
    type: string
    constraints:
      - length: { min: 1, max: 15 }
      - allowed_pattern: "[a-zA-Z][a-zA-Z0-9]*"
        description: must begin with a letter and contain only alphanumeric characters.

  safe_mode_administrator_password:
    default: P4ssw0rd
    description: The safe mode administration password
    type: string
    hidden: true
    constraints:
      - length: { min: 8, max: 64 }
      - allowed_pattern: "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*"
        description: must contain letters numbers and symbols

#End Instance parameters
#Start network parameters
  network_name:
    default: POC_Network
    type: string
    description: Name of private network to be created
  public_net_subnet:
    default: POC_Public
    type: string
    description: Name of private Sub network to be created
  public_net_cidr:
    default: 10.100.0/24
    type: string
    description: Private network address (CIDR notation)
  public_net_gateway:
    default: 10.100.0.254
    type: string
    description: Private network gateway address
  public_net_pool_start:
    default: 10.100.0.10
    type: string
    description: Start of private network IP address allocation pool
  public_net_pool_end:
    default: 10.100.0.253
    type: string
    description: End of private network IP address allocation pool
  private_net_subnet:
    default: POC_Private
    type: string
    description: Name of private Sub network to be created

  private_net_cidr:
    default: 10.200.0/24
    type: string
    description: Private network address (CIDR notation)

  private_net_gateway:
    default: 10.200.0.254
    type: string
    description: Private network gateway address

  private_net_pool_start:
    default: 10.200.0.10
    type: string
    description: Start of private network IP address allocation pool

  private_net_pool_end:
    default: 10.200.0.253
    type: string
    description: End of private network IP address allocation pool

#End network parameters
resources:
#Network
  poc_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: network_name }
  public_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: poc_net }
      cidr: { get_param: public_net_cidr }
      gateway_ip: { get_param: public_net_gateway }
      allocation_pools:
        - start: { get_param: public_net_pool_start }
          end: { get_param: public_net_pool_end }
      name: { get_param: public_net_subnet }
  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { get_param: private_net_subnet }
      network_id: { get_resource: poc_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }
#Instances
  AD1:
    type: OS::Nova::Server
    properties:
      #availability_zone: { get_param: compute }
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      name: { get_param: hostname_AD1 }
      networks:
        - port: { get_resource: server1_port }
      user_data:
        str_replace:
          template: |
            #ps1_sysnative
            $ErrorActionPreference = 'Stop'
            Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools
            $user = [ADSI]'WinNT://./Administrator'
            # Disable user
            #$user.userflags = 2
            #$user.SetInfo()
            $user.SetPassword('safe_mode_administrator_password')
            Import-Module ADDSDeployment
            $safeModePwd = (ConvertTo-SecureString 'safe_mode_administrator_password' -AsPlainText -Force)
            Install-ADDSForest -DomainName 'domain_name' -SafeModeAdministratorPassword $safeModePwd -InstallDns -NoRebootOnCompletion -Force
            exit 1001
          params:
            safe_mode_administrator_password: { get_param: safe_mode_administrator_password }
            domain_name: { get_param: domain_name }
            #domain_netbios_name_AD1: { get_param: hostname_AD1 }

  server1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: poc_net }
      name: { get_param: hostname_AD1 }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
          ip_address: 10.200.0.20 

  AD2:
    type: OS::Nova::Server
    properties:
      #availability_zone: { get_param: compute }
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      name: { get_param: hostname_AD2 }
      networks:
        - port: { get_resource: server2_port }
      user_data:
        str_replace:
          template: |
            #ps1_sysnative
            $ErrorActionPreference = 'Stop'
            Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools
            $user = [ADSI]'WinNT://./Administrator'
            # Disable user
            #$user.userflags = 2
            #$user.SetInfo()
            $user.SetPassword('safe_mode_administrator_password')
            Import-Module ADDSDeployment
            Set-DnsClientServerAddress -InterfaceAlias Ethernet -ServerAddresses 10.200.0.20
            $safeModePwd = (ConvertTo-SecureString 'safe_mode_administrator_password' -AsPlainText -Force)
            new-item -path "C:\" -name AD-HA.ps1 -itemtype "file" -value "Install-ADDSDomainController -Credential (Get-Credential 'domain_name')  -DomainName 'domain_name' -SafeModeAdministratorPassword (ConvertTo-SecureString 'safe_mode_administrator_password' -AsPlainText -Force) -InstallDns -Force"
            exit 1001
          params:
            safe_mode_administrator_password: { get_param: safe_mode_administrator_password }
            domain_name: { get_param: domain_name }
            #domain_netbios_name_AD1: { get_param: hostname_AD1 }

  server2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: poc_net }
      name: { get_param: hostname_AD2 }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
          ip_address: 10.200.0.21 
outputs:
  server1_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ AD1, first_address ] }
  # server2_private_ip:
    # description: IP address of server2 in private network
    # value: { get_attr: [ AD2, first_address ] }
